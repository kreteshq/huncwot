import { join } from "path";

export const convertFilenameToPathname = (filename: string) => {
	const pathname = filename
		.replace(/(\.page)?\.(ts|tsx)$/, "")
		.replace(/(\/)?index/, "");

	const segments = pathname.split("/");
	const convertedSegments = segments.map(replaceSquareBracketsWithColons).join("/");
	const result = `/${convertedSegments}`;

	return result;
};

interface Entry {
	filename: string;
	pathname: string;
}

const constructImportStatement = ({ filename }: Entry, index: number) =>
	`import * as $${index} from "./routes/${filename}";`;

const constructRouteStatement = ({ pathname }: Entry, index: number) => `'${pathname}': $${index},`;

export const generate = async (entries: Entry[]) => {
	const output = `// DO NOT EDIT. This file is automatically generated.
import type { Manifest } from 'kretes';

${entries.map(constructImportStatement).join("\n")}

const manifest: Manifest = {
  routes: {
    ${entries.map(constructRouteStatement).join("\n")}
  },
};

export default manifest;
`;

	await Deno.writeTextFile("./manifest.g.ts", output);
};

// PRIVATE

const replaceSquareBracketsWithColons = (segment: string) => {
	const wildcardMatch = segment.match(/\[\.\.\.(.+)\]/);
	if (wildcardMatch) return `:${wildcardMatch[1]}*`;

	const regularMatch = segment.match(/\[(.+)\]/);
	if (regularMatch) return `:${regularMatch[1]}`;

	return segment;
};
